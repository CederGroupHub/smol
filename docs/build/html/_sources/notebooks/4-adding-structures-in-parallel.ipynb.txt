{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Adding Structures in Parallel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import json\n",
    "from monty.serialization import loadfn\n",
    "from pymatgen import Structure\n",
    "from smol.cofe import ClusterSubspace, StructureWrangler"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1) Preparing a `StructureWrangler`\n",
    "When adding large structures or structures that underwent a considerable amount of relaxation (compared to the primitive structure) to a `StructureWrangler`, it can be time consuming to appropriately match the structures to compute the correlations vector for the feature matrix. In this case it can be very helpful (and easy!) to add structures in a dataset in parallel.\n",
    "\n",
    "First, we'll prepare the cluster subspace and structure wrangler as before."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the raw data\n",
    "\n",
    "# load the prim structure\n",
    "lmof_prim = loadfn('data/lmof_prim.json')\n",
    "    \n",
    "# load the fitting data\n",
    "lmof_data =loadfn('data/lmof_fitting_data.json')\n",
    "    \n",
    "# create a cluster subspace\n",
    "subspace = ClusterSubspace.from_radii(lmof_prim,\n",
    "                                      radii={2: 7, 3: 5},\n",
    "                                      basis='sinusoid',\n",
    "                                      supercell_size=('O2-', 'F-'),\n",
    "                                      ltol = 0.15, stol = 0.2,\n",
    "                                      angle_tol = 15)\n",
    "\n",
    "# create the structre wrangler\n",
    "wrangler = StructureWrangler(subspace)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2) Add structures in parallel\n",
    "Since adding structures is an embarassingly parallel operation,\n",
    "all we need to do is run a parallel loop. There are a few ways to\n",
    "do this in python. Here we will use the `joblib` library. But using `multiprocessing` \n",
    "would be very similar."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This computers has 8 cpus.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=8)]: Using backend LokyBackend with 8 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parallel finished in 25.01846957206726 seconds.\n",
      "Matched 17/26\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=8)]: Done  26 out of  26 | elapsed:   25.0s finished\n"
     ]
    }
   ],
   "source": [
    "from time import time\n",
    "from joblib import Parallel, delayed, cpu_count\n",
    "\n",
    "print(f'This computers has {cpu_count()} cpus.')\n",
    "\n",
    "nprocs = cpu_count()  # setting this to -1 also uses all cpus\n",
    "\n",
    "# setting a batch size usually improves speed\n",
    "batch_size = 'auto' #len(lmof_data)//nprocs\n",
    "\n",
    "start = time()\n",
    "\n",
    "# we need to add the data a bit differently to avoid having to use\n",
    "# shared memory between processes\n",
    "with Parallel(n_jobs=nprocs, batch_size=batch_size, verbose=True) as parallel: \n",
    "    items = parallel(delayed(wrangler.process_structure)(struct, {'energy': energy})\n",
    "                                                         for struct, energy in lmof_data)\n",
    "\n",
    "# unpack the items and remove Nones from structure that failed to match\n",
    "data_items = [item for item in items if item is not None]\n",
    "wrangler.append_data_items(data_items)\n",
    "\n",
    "print(f'Parallel finished in {time()-start} seconds.')\n",
    "print(f'Matched {wrangler.num_structures}/{len(lmof_data)} structures.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.1) Compare with serial code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unable to match Li+6 Mn3+6 Mn4+3 O2-18 with properties {'energy': -363.8585} to supercell_structure. Throwing out.\n",
      " Error Message: Mapping could not be found from structure.\n",
      "Unable to match Mn3+32 O2-48 with properties {'energy': -1057.1584} to supercell_structure. Throwing out.\n",
      " Error Message: Supercell could not be found from structure\n",
      "Unable to match Li+8 Mn2+4 Mn4+12 O2-32 with properties {'energy': -636.38575} to supercell_structure. Throwing out.\n",
      " Error Message: Mapping could not be found from structure.\n",
      "Unable to match Li+9 Mn3+5 Mn4+2 O2-16 with properties {'energy': -321.99251} to supercell_structure. Throwing out.\n",
      " Error Message: Mapping could not be found from structure.\n",
      "Unable to match Li+7 Mn3+6 Mn4+4 Mn2+1 O2-19 F-5 with properties {'energy': -453.85747} to supercell_structure. Throwing out.\n",
      " Error Message: Mapping could not be found from structure.\n",
      "Unable to match Li+7 Mn3+7 Mn4+3 Mn2+1 O2-18 F-6 with properties {'energy': -452.20166} to supercell_structure. Throwing out.\n",
      " Error Message: Mapping could not be found from structure.\n",
      "Unable to match Li+6 Mn3+6 Mn4+3 O2-18 with properties {'energy': -363.96163} to supercell_structure. Throwing out.\n",
      " Error Message: Mapping could not be found from structure.\n",
      "Unable to match Li+9 Mn3+5 Mn4+2 O2-16 with properties {'energy': -321.98387} to supercell_structure. Throwing out.\n",
      " Error Message: Mapping could not be found from structure.\n",
      "Unable to match Li+9 Mn3+5 Mn4+2 O2-16 with properties {'energy': -321.62407} to supercell_structure. Throwing out.\n",
      " Error Message: Mapping could not be found from structure.\n",
      "Serial finished in 70.37592911720276 seconds.\n",
      "Matched 17/26\n"
     ]
    }
   ],
   "source": [
    "wrangler.remove_all_data()\n",
    "\n",
    "start = time()\n",
    "\n",
    "for s, e in lmof_data:\n",
    "    wrangler.add_data(s, {'energy': e}, verbose=True)\n",
    "\n",
    "print(f'Serial finished in {time()-start} seconds.')\n",
    "print(f'Matched {wrangler.num_structures}/{len(lmof_data)} structures.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "matx_dev",
   "language": "python",
   "name": "matx_dev"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
